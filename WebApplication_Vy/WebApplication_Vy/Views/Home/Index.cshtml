@model WebApplication_Vy.Models.DTO.TripData.TripQueryDTO

@{
    ViewBag.Title = "Index";
}

<script type="text/javascript">
    $(function () {
        var time = ["00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00"];

        var dropdown = "";
        for (var i of time) {
            dropdown += "<option value='" + i + "'>" + i + "</option>";
        }
        $("#time").append(dropdown);
        $("#Return_Time").append(dropdown);
        
        var stations = [];
        fetch("https://itinerary.cloud.nsb.no/api/stops", { "credentials": "omit", "headers": { "accept": "application/json", "sec-fetch-mode": "cors", "x-language": "no" }, "referrer": "https://www.vy.no/bestill/velg-togavgang?from=Oslo%20S&fromDisplayName=Oslo%20S&fromType=train-station-name&to=Bergen&toDisplayName=Bergen&toType=train-station-name&departureDatetime=2019-09-24%2010%3A28&petFree=false&pasCats=1&numPasCats=1", "referrerPolicy": "no-referrer-when-downgrade", "body": null, "method": "GET", "mode": "cors" })
            .then(data => data.json()).then(data => {
                $.each(data, function (index, value) {
                    if (value.active && value.type === "TRAIN") {
                        stations.push(value.name)
                    }
                });
                stations.sort();
            });
        console.log(stations);

        $("#SwitchButton").on("click", function (e) {

            var destinationTemp = $("#Arrival").val();
            var departureTemp = $("#Departure").val();

            $("#Arrival").val(departureTemp);
            $("#Departure").val(destinationTemp);
        });

        $("#SwitchButton").on("hover").css("cursor", "pointer");

        $('#Round_Trip').bootstrapToggle({
            off: 'One way',
            on: 'Round trip',
            onstyle: "success"
        });

        $("#Round_Trip").change(function () {
            $("#ReturnDiv").slideToggle();
        });

        var date = new Date();
        date.setDate(date.getDate() - 1);

        //Form spesific javascript
        $('#date').datepicker({
            minDate: date,
            uiLibrary: 'bootstrap4',
            format: "yyyy-mm-dd",
            weekStartDay: 1,
        });
        $('#ReturnDate').datepicker({
            minDate: date,
            uiLibrary: 'bootstrap4',
            format: "yyyy-mm-dd",
            weekStartDay: 1,
        });

        $('.stations').autocomplete({
            source: stations
        });

        $("#adult").children("input").val(1);
        $("#child").children("input").val(0);
        $("#student").children("input").val(0);
        $("#senior").children("input").val(0);

        var totalTickets = 1;

        $(".add-sub-ticket").on("click", ".pluss", function () {
            var value = $(this).siblings("input").val();
            if (value == 0) {
                $(this).siblings(".minus").attr("disabled", false);
            }
            ++value;
            ++totalTickets;
            $(this).siblings("input").val(value);
            $(this).siblings("b").text(value);
        });

        $(".add-sub-ticket").on("click", ".minus", function () {
            if (totalTickets <= 1) return
            var value = $(this).siblings("input").val();
            --value;
            --totalTickets;
            $(this).siblings("input").val(value);
            $(this).siblings("b").text(value);
            if (value <= 0) {
                $(this).attr("disabled", true);
            }
        });



        $("#dateandtime").on("change", function () {
            date = new Date($("#dateandtime").val())
            date.setDate(date.getDate() - 1)
            $("#ReturnDate").datepicker("destroy");
            $("#ReturnDate").datepicker({
                minDate: date,
                uiLibrary: 'bootstrap4',
                format: "yyyy-mm-dd",
                weekStartDay: 1,
            });
            
        });
    });
</script>
<div id="ajax_form" class="container">
    @using (Ajax.BeginForm("Index", "Home", new AjaxOptions { HttpMethod = "POST", OnSuccess = "Success" }))
    {
        @Html.AntiForgeryToken()
        <div align="center" style="padding-bottom: 100px">
            <h1>Welcome! Where do you want to travel?</h1>
        </div>
        <div class="row">
            <div class="col-auto col-md-1">

            </div>

            <div class="col-12 col-md-10">
                <!-- from - to row -->
                <div class="row">
                    <div class="col-12 col-md-5">
                        <div class="row">
                            <div class="col-auto col-md-9">

                            </div>
                            <div class="col-12 col-md-3">
                                @Html.LabelFor(model => model.Departure_Station, htmlAttributes: new { @class = "control-label" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                @Html.EditorFor(model => model.Departure_Station, new { htmlAttributes = new { id = "Departure", @class = "stations form-control d-inline-block" } })
                                @Html.ValidationMessageFor(model => model.Departure_Station, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-md-2 text-center mt-4">
                        <img class="img-fluid" id="SwitchButton" src="../../Content/SwitcherBlueGrey80.svg" height="30" alt="arrows">
                    </div>
                    <div class="col-12 col-md-5">
                        <div class="row">
                           
                            <div class="col-12 col-md-3">
                                @Html.LabelFor(model => model.Arrival_Station, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-auto col-md-9"> <!-- spacer --></div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                @Html.EditorFor(model => model.Arrival_Station, new { htmlAttributes = new { id = "Arrival", @class = "stations form-control" } })
                                @Html.ValidationMessageFor(model => model.Arrival_Station, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Direct - retur buttons -->
                <div class="row mt-3">
                    <!-- Default switch -->
                    <div class="col-12 text-center">
                        <input id="Round_Trip" type="checkbox" value="true" name="Round_Trip"> One way or roundtrip?
                    </div>

                    <!-- Spacing -->
                    @*<div class="col-auto col-md-2"></div>

                        <div class="col-12 col-md-5">
                        </div>*@
                </div>

                <!-- date - time -->
                <div class="row mt-3">
                    <div class="col-12 col-sm-7 col-md-5">
                        <div class="row">
                            <div class="col-auto col-xl-2"></div>
                            <div class="col-12 col-xl-10">
                                @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-auto col-xl-2"></div>
                            <div class="col-12 col-xl-10">
                                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { id = "date", @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <!-- padding -->
                    <div class="col-auto col-md-2 p-0">
                    </div>

                    <div class="col-12 col-sm-5 col-md-5">
                        <div class="row">
                            <div class="col">
                                @Html.LabelFor(model => model.Time, htmlAttributes: new { @class = "control-label" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <select id="time" name="Time" class="custom-select form-control" required>
                                    <option value="" selected>Choose a time...</option>
                                </select>
                                @Html.ValidationMessageFor(model => model.Time, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <!-- hidden return div -->
                <div class="row mt-3" id="ReturnDiv" style="display: none">
                    <div class="col-12 col-sm-7 col-md-5">
                        <div class="row">
                            <div class="col-auto col-md-2"></div>
                            <div class="col-12 col-md-10">
                                @Html.LabelFor(model => model.Return_Date, htmlAttributes: new { @class = "control-label" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-auto col-xl-2"></div>
                            <div class="col-12 col-xl-10">
                                @Html.EditorFor(model => model.Return_Date, new { htmlAttributes = new { id = "ReturnDate", @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Return_Date, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <!-- spacing -->
                    <div class="col-auto col-md-2 p-0"></div>

                    <div class="col-12 col-sm-5 col-md-5">
                        <div class="row">
                            <div class="col">
                                @Html.LabelFor(model => model.Return_Time, htmlAttributes: new { @class = "control-label" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <select id="Return_Time" name="Return_Time" class="custom-select form-control" required>
                                    <option value="" selected>Choose a time...</option>
                                </select>
                                @Html.ValidationMessageFor(model => model.Return_Time, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Select people -->
                <div class="row mt-3">
                    <div class="col-12 col-md-5">
                        <div class="row">
                            <div id="adult" class="w-100 add-sub-ticket sub-ticket-left">
                                @Html.LabelFor(model => model.Adult, htmlAttributes: new { @class = "control-label" })
                                <button type="button" class="minus btn btn-secondary btn-circle btn-circle-sm"><span>-</span></button>
                                @Html.HiddenFor(model => model.Adult, new { @class = "control-label" })<b class="mt-1">1</b>
                                <button type="button" class="pluss btn btn-success btn-circle btn-circle-sm"><span class="vertical-align-center">+</span></button>
                                @Html.ValidationMessageFor(model => model.Adult, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div id="child" class="w-100 add-sub-ticket sub-ticket-left">
                                @Html.LabelFor(model => model.Child, htmlAttributes: new { @class = "control-label" })
                                <button type="button" class="minus btn btn-secondary btn-circle btn-circle-sm" disabled><span>-</span></button>
                                @Html.HiddenFor(model => model.Child, new { @class = "control-label" })<b class="mt-1">0</b>
                                <button type="button" class="pluss btn btn-success btn-circle btn-circle-sm"><span>+</span></button>
                                @Html.ValidationMessageFor(model => model.Child, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <!-- spacing -->
                    <div class="col-auto col-md-2"></div>

                    <div class="col col-md-5">
                        <div class="row">
                            <div id="student" class="w-100 add-sub-ticket">
                                <button type="button" class="minus btn btn-secondary btn-circle btn-circle-sm" disabled><span>-</span></button>
                                @Html.HiddenFor(model => model.Student, new { @class = "control-label" })<b class="mt-1">0</b>
                                <button type="button" class="pluss btn btn-success btn-circle btn-circle-sm"><span>+</span></button>
                                @Html.LabelFor(model => model.Student, htmlAttributes: new { @class = "control-label" })
                                @Html.ValidationMessageFor(model => model.Student, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div id="senior" class="w-100 add-sub-ticket">
                                <button type="button" class="minus btn btn-secondary btn-circle btn-circle-sm" disabled><span>-</span></button>
                                @Html.HiddenFor(model => model.Senior, new { @class = "control-label " })<b class="mt-1">0</b>
                                <button type="button" class="pluss btn btn-success btn-circle btn-circle-sm"><span>+</span></button>
                                @Html.LabelFor(model => model.Senior, htmlAttributes: new { @class = "control-label" })
                                @Html.ValidationMessageFor(model => model.Senior, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div align="center" class="mt-2">
                    <div class="form-group">
                        <div class="col-12 col-md-5">
                            <input type="submit" value="Search" class="btn btn-outline-success pl-3 pr-3" />
                        </div>
                    </div>
                    <hr />
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-12 text-success">
                            @ViewBag.Records
                        </div>
                    </div>
                </div>

            </div>
            <div class="col-auto col-md-1 p-0">
            </div>
        </div>
    }
</div>





<style>
    input {
        max-width: 100%;
    }
</style>