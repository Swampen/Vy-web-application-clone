@model WebApplication_Vy.Models.DTO.TripData.TripQuerryDTO

@{
    ViewBag.Title = "Index";
}

<script type="text/javascript">
    $(function () {
        var time = ["10:00", "12:00", "14:00", "16:00", "18:00"];

        var dropdown = "";
        for (var i of time) {
            dropdown += "<option value='" + i + "'>" + i + "</option>";
        }
        $("#time").append(dropdown);


        var stations = [];
        var stationsData = fetch("https://itinerary.cloud.nsb.no/api/stops", { "credentials": "omit", "headers": { "accept": "application/json", "sec-fetch-mode": "cors", "x-language": "no" }, "referrer": "https://www.vy.no/bestill/velg-togavgang?from=Oslo%20S&fromDisplayName=Oslo%20S&fromType=train-station-name&to=Bergen&toDisplayName=Bergen&toType=train-station-name&departureDatetime=2019-09-24%2010%3A28&petFree=false&pasCats=1&numPasCats=1", "referrerPolicy": "no-referrer-when-downgrade", "body": null, "method": "GET", "mode": "cors" })
            .then(data => data.json()).then(data => {
                $.each(data, function (index, value) {
                    if (value.active && value.type === "TRAIN") {
                        stations.push(value.name)
                    }
                });
            });
        console.log(stations);

        $("#postalcode").on('input', function () {
            var postalcode = $("#postalcode").val();
            var jsonin = {
                Postalcode: postalcode,
            };

            if (postalcode.match("[0-9]{4}")) {
                $.ajax({
                    url: "@Url.Action("searchzip", "home")",
                    type: 'POST',
                    data: JSON.stringify(jsonin),
                    contentType: "application/json;charset=utf-8",
                    success: function (response) {
                        $('#postaltown').val(response);
                    }
                });
            } else {
                $('#postaltown').val("");
            }
        });
        var date = new Date();
        date.setDate(date.getDate()-1);

        //Form spesific javascript
        $('#dateandtime').datepicker({
           minDate: date,
           uiLibrary: 'bootstrap4',
           format: "yyyy-mm-dd"
        });

        $('.stations').autocomplete({
            source: stations 
        });

    });
</script>
<div id="ajax_form">
    @using (Ajax.BeginForm("Index", "Home", new AjaxOptions { HttpMethod = "POST", OnSuccess = "Success" }))
    {
        @Html.AntiForgeryToken()
        <div align="center" style="padding-bottom: 100px">
            <h1>Hei, hvor vil du reise?</h1>
        </div>
        
        <div class="container h-100">
          <div class="row h-100 justify-content-center align-items-center">
                <div class="form-group" >
                    @Html.LabelFor(model => model.Departure_Station, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-sm">
                        @Html.EditorFor(model => model.Departure_Station, new { htmlAttributes = new { id = "", @class = "stations form-control" } })
                        <p id="chosen"></p>
                        @Html.ValidationMessageFor(model => model.Departure_Station, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Arrival_Station, "Destination", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-sm">
                        @Html.EditorFor(model => model.Arrival_Station, new { htmlAttributes = new { id = "", @class = "stations form-control" } })
                        <label id="postaltown"></label>
                        @Html.ValidationMessageFor(model => model.Arrival_Station, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
            
        
            <div class="container h-100">
              <div class="row h-100 justify-content-center align-items-center">
                <div class="form-group">
                    <div class="col-sm">
                        @Html.ValidationSummary(true, "", new {@class = "text-danger"})
                        <div class="form-group">
                            @Html.LabelFor(model => model.Date, htmlAttributes: new {@class = "control-label col-md-2"})
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Date, new {htmlAttributes = new {id = "dateandtime", @class = "form-control"}})
                                @Html.ValidationMessageFor(model => model.Date, "", new {@class = "text-danger"})
                            </div>
                        </div>
                    </div>
                </div>
        
            
                <div class="form-group">
                    @Html.LabelFor(model => model.Time, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-sm">
                        <select id="time" name="Time" class="custom-select form-control" required>
                            <option value="" selected>Choose a time...</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.Time, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>
            </div>
            
            <div class="form-group">
                <div class="col-sm">
                    <input type="submit" value="Videre" class="btn btn-success"/>
                </div>
            </div>
            <hr/>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-12 text-success">
                    @ViewBag.Records
                </div>
            </div>
             
                  }
              </div>
       
